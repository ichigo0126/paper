// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String            @id @default(uuid()) @db.Char(36)
  username         String            @db.VarChar(255)
  email            String            @unique @db.VarChar(255)
  bio              String?           @db.Text
  website_url      String?           @db.VarChar(255)
  created_at       DateTime          @default(now()) @db.Timestamp()
  updated_at       DateTime          @updatedAt @db.Timestamp()
  reviews          Review[]
  likes            Like[]
  comments         Comment[]
  notifications    Notification[]
  bookmarkArticles BookmarkArticle[]
  bookmarkBooks    BookmarkBook[]
  followers        Follow[]          @relation("Follower")
  following        Follow[]          @relation("Following")
}

model Book {
  id               String         @id @default(uuid()) @db.Char(36)
  image_path       String         @db.VarChar(255)
  title            String         @db.VarChar(255)
  author           String         @db.VarChar(255)
  publication_date DateTime       @db.Date
  language         String         @db.VarChar(50)
  created_at       DateTime       @default(now()) @db.Timestamp()
  updated_at       DateTime       @updatedAt @db.Timestamp()
  reviews          Review[]
  bookmarks        BookmarkBook[]
}

model Article {
  id               String            @id @default(uuid()) @db.Char(36)
  image_path       String            @db.VarChar(255)
  title            String            @db.VarChar(255)
  author           String            @db.VarChar(255)
  publication_date DateTime          @db.Date
  language         String            @db.VarChar(50)
  created_at       DateTime          @default(now()) @db.Timestamp()
  updated_at       DateTime          @updatedAt @db.Timestamp()
  reviews          Review[]
  bookmarks        BookmarkArticle[]
}

model Review {
  id                   String                    @id @default(uuid()) @db.Char(36)
  user_id              String                    @db.Char(36)
  description          String                    @db.Text
  stars                Int
  target_type          ReviewsTargetType
  book_id              String?
  article_id           String?
  engineer_skill_level ReviewsEngineerSkillLevel
  created_at           DateTime                  @default(now()) @db.Timestamp()
  updated_at           DateTime                  @updatedAt @db.Timestamp()
  user                 User                      @relation(fields: [user_id], references: [id])
  book                 Book?                     @relation(fields: [book_id], references: [id])
  article              Article?                  @relation(fields: [article_id], references: [id])
  likes                Like[]
  comments             Comment[]
  review_tags          ReviewTag[]
}

model Like {
  user_id    String   @db.Char(36)
  review_id  String
  comment_id String?
  created_at DateTime @default(now()) @db.Timestamp()
  user       User     @relation(fields: [user_id], references: [id])
  review     Review   @relation(fields: [review_id], references: [id])
  comment    Comment? @relation(fields: [comment_id], references: [id])

  @@id([user_id, review_id])
}

model Comment {
  id                String    @id @default(uuid()) @db.Char(36)
  user_id           String    @db.Char(36)
  review_id         String
  parent_comment_id String?
  description       String    @db.Text
  created_at        DateTime  @default(now()) @db.Timestamp()
  updated_at        DateTime  @updatedAt @db.Timestamp()
  user              User      @relation(fields: [user_id], references: [id])
  review            Review    @relation(fields: [review_id], references: [id])
  parent_comment    Comment?  @relation("CommentToComment", fields: [parent_comment_id], references: [id])
  child_comments    Comment[] @relation("CommentToComment")
  likes             Like[]
}

model Tag {
  id          String      @id @default(uuid()) @db.Char(36)
  name        String      @unique @db.VarChar(255)
  review_tags ReviewTag[]
}

model ReviewTag {
  review_id String
  tag_id    String
  review    Review @relation(fields: [review_id], references: [id])
  tag       Tag    @relation(fields: [tag_id], references: [id])

  @@id([review_id, tag_id])
}

model Notification {
  id               String           @id @default(uuid()) @db.Char(36)
  user_id          String           @db.Char(36)
  type             NotificationType
  is_read          Boolean          @default(false)
  content          String           @db.Text
  created_at       DateTime         @default(now()) @db.Timestamp()
  review_id        String?
  comment_id       String?
  follower_user_id String?          @db.Char(36)
  user             User             @relation(fields: [user_id], references: [id])
}

model BookmarkBook {
  user_id    String   @db.Char(36)
  book_id    String
  created_at DateTime @default(now()) @db.Timestamp()
  user       User     @relation(fields: [user_id], references: [id])
  book       Book?    @relation(fields: [book_id], references: [id])

  @@id([user_id, book_id])
}

model BookmarkArticle {
  user_id    String   @db.Char(36)
  article_id String
  created_at DateTime @default(now()) @db.Timestamp()
  user       User     @relation(fields: [user_id], references: [id])
  article    Article? @relation(fields: [article_id], references: [id])

  @@id([user_id, article_id])
}

model Follow {
  follower_user_id String   @db.Char(36)
  followed_user_id String   @db.Char(36)
  created_at       DateTime @default(now()) @db.Timestamp()
  follower         User     @relation("Follower", fields: [follower_user_id], references: [id])
  followed         User     @relation("Following", fields: [followed_user_id], references: [id])

  @@id([follower_user_id, followed_user_id])
}

enum ReviewsTargetType {
  BOOK
  ARTICLE
}

enum ReviewsEngineerSkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
